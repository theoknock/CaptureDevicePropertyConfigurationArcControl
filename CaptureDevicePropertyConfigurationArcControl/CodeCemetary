//
//  controlView.m
//  CaptureDevicePropertyConfigurationArcControl
//
//  Created by Xcode Developer on 11/5/21.
//

#import "ControlView.h"
#import "CaptureDevicePropertyArcControlConfiguration.h"

@implementation ControlView

@dynamic layer;

+ (Class)layerClass {
    return [CAShapeLayer class];
}

typedef struct __attribute__((objc_boxable)) ArcControlMeasurements ArcControlMeasurements;
static double center[2] = {0.0, 0.0};
static double radius    = 380.0;
static double angle     = 180.0;
static double start     = 180.0;
static double length    = 22.5;
static double end       = 270.0;
static int    sectors   = 10;
static int    units     = 10;
static double range[2]  = {0.0, 1.0};
static double value;
static CGRect (^bounds)(void) = ^ { return CGRectMake(center[0] + radius, center[1] - radius, radius, radius); };

double * const center_ptr  = &center[2];
double * const radius_ptr  = &radius;
double * const angle_ptr   = &angle;
double * const start_ptr   = &start;
double * const length_ptr  = &length;
double * const end_ptr     = &end;
int    * const sectors_ptr = &sectors;
int    * const units_ptr   = &units;
double * const range_ptr   = &range[2];
double * const value_ptr   = &value;

static struct __attribute__((objc_boxable)) ArcControlMeasurements
{
    double * const center_ptr;
    double * const radius_ptr;
    double * const angle_ptr;
    double * const start_ptr;
    double * const length_ptr;
    double * const end_ptr;
    int    * const sectors_ptr;
    int    * const int_ptr;
    double * const range_ptr;
    double * const value_ptr;
    __unsafe_unretained CGRect (^bounds)(void);
} arcControlMeasurements = {
    .radius_ptr  = &radius,
    .angle_ptr   = &angle,
    .center_ptr  = &center[2],
    .start_ptr   = &start,
    .length_ptr  = &length,
    .end_ptr     = &end,
    .sectors_ptr = &sectors,
    .range_ptr   = &range[2],
    .value_ptr   = &value,
    .bounds  = ^ CGRect { return CGRectMake(((double *)center_ptr)[0] + *radius_ptr, ((double *)center_ptr)[1] - *radius_ptr, *radius_ptr, *radius_ptr); },
};


//𝑥(𝑛)=𝑥(0)+𝑟cos(2𝜋𝑛𝑁)𝑦(𝑛)=𝑦(0)+𝑟sin(2𝜋𝑛𝑁)
//
//// Points on a circle using radius and center point
//(𝑥,𝑦)≡(𝑥0+𝑟cos𝜃,𝑦0+𝑟sin𝜃)
//
//2𝜋/𝑁

typedef enum : NSUInteger {
    TouchEventHandlerTypeTouchesBegan,
    TouchEventHandlerTypeTouchesMoved,
    TouchEventHandlerTypeTouchesEnded,
    TouchEventHandlerTypeDefault
} TouchEventHandlerType;

static void (^(^(^(^(^(^(^draw_control)(ArcControlMeasurements * const))(ControlView *__strong))(CGRect))(CAShapeLayer *__strong))(CGContextRef __nullable))(TouchEventHandlerType))(UITouch *);
static void (^(^(^(^(^(^draw_primary_component_init)(ControlView *__strong))(CGRect))(CAShapeLayer *__strong))(CGContextRef __nullable))(TouchEventHandlerType))(UITouch *);
static void (^(^(^(^(^draw_primary_component)(CGRect))(CAShapeLayer *__strong))(CGContextRef __nullable))(TouchEventHandlerType))(UITouch *);
static void (^(^(^(^draw_secondary_component_init)(CAShapeLayer *__strong))(CGContextRef __nullable))(TouchEventHandlerType))(UITouch *);
static void (^(^(^draw_secondary_component)(CGContextRef __nullable))(TouchEventHandlerType))(UITouch *);
static void (^(^handle_touch_control_event_init)(TouchEventHandlerType))(UITouch *);
static void (^handle_touch_control_event[TouchEventHandlerTypeDefault])(UITouch *);

static void (^(^(^(^(^(^(^(^draw_control_init)(__nullable dispatch_block_t))(ArcControlMeasurements * const))(ControlView *__strong))(CGRect))(CAShapeLayer *__strong))(CGContextRef __nullable))(TouchEventHandlerType))(UITouch *) =
^ (dispatch_block_t init) {
    if (init) init();
    return (^ (ArcControlMeasurements * const measurements) {
        return (^ (ControlView * view) {
            return (^ (CGRect rect) {
                UIButton * (^CaptureDeviceConfigurationPropertyButton)(CaptureDeviceConfigurationControlProperty) = CaptureDeviceConfigurationPropertyButtons(CaptureDeviceConfigurationControlPropertyImageValues, view);
                for (CaptureDeviceConfigurationControlProperty property = CaptureDeviceConfigurationControlPropertyTorchLevel; property <= CaptureDeviceConfigurationControlPropertyZoomFactor; property++) {
                    UIButton * button = CaptureDeviceConfigurationPropertyButton(property);
                    CGPoint center = CGPointMake(CGRectGetMidX(rect), CGRectGetMidY(rect));
                    CGFloat radius = (center.x);
//                    double x = (center.x + (radius * -cosf(2.0 * M_PI_4 * ((property) / 4.0))));
//                    double y = (center.y + (radius * -sinf(2.0 * M_PI_4 * ((property) / 4.0))));
                    double angle = 180.0 + (90.0 * ((property) / 4.0));
                    UIBezierPath * bezier_quad_curve = [UIBezierPath bezierPathWithArcCenter:CGPointMake(CGRectGetMaxX(rect), CGRectGetMaxY(rect))
                                                                                      radius:radius
                                                                                  startAngle:degreesToRadians(angle) endAngle:degreesToRadians(angle)
                                                                                   clockwise:FALSE];
                    
                    [button setCenter:[bezier_quad_curve currentPoint]];
                    static dispatch_once_t onceToken[5];
                    dispatch_once(&onceToken[property], ^{
                        [view addSubview:button];
                    });
                }
                return (^ (CAShapeLayer * __strong layer) {
                    return (^ (CGContextRef __nullable context) {
                        return (^ (TouchEventHandlerType touch_event_handler_type) {
                            [layer setLineWidth:1.0];
                            UIColor * stroke_color = (touch_event_handler_type == TouchEventHandlerTypeTouchesBegan)
                            ? [UIColor systemYellowColor] : (touch_event_handler_type == TouchEventHandlerTypeTouchesMoved)
                            ? [UIColor systemGreenColor] : [UIColor systemBlueColor];
                            [layer setStrokeColor:stroke_color.CGColor];
                            [layer setFillColor:[UIColor clearColor].CGColor];
                            [layer setBackgroundColor:[UIColor clearColor].CGColor];
                            void(^touch_event_handler)(UITouch *) = ^ (UITouch * touch) {
                                CGPoint center = CGPointMake(CGRectGetMaxX(rect), CGRectGetMaxY(rect));
                                CGFloat radius = (center.x);
                                CGPoint touch_point = [touch preciseLocationInView:touch.view];
                                CGPoint tp = touch_point;/* CGPointMake(rescale(fmaxf(CGRectGetMinX(rect), fminf(CGRectGetMaxX(rect), touch_point.x)), CGRectGetMinX(rect), CGRectGetMaxX(rect), 0.0, 360.0),
                                                         rescale(fmaxf(CGRectGetMinY(rect), fminf(CGRectGetMaxY(rect), touch_point.y)), CGRectGetMinY(rect), CGRectGetMaxY(rect), 0.0, 360.0));*/
                                radius = sqrt(pow(tp.x - center.x, 2.0) + pow(tp.y - center.y, 2.0));
                                UIBezierPath * bezier_quad_curve = [UIBezierPath bezierPathWithArcCenter:CGPointMake(CGRectGetMaxX(rect), CGRectGetMaxY(rect))
                                                                                                  radius:radius
                                                                                              startAngle:degreesToRadians(270.0) endAngle:degreesToRadians(180.0)
                                                                                               clockwise:FALSE];
                                [layer setPath:bezier_quad_curve.CGPath];
                            };
                            void(^touch_event_handlers[3])(UITouch *) = {touch_event_handler, touch_event_handler, touch_event_handler};
                            return touch_event_handlers[1];
                        });
                    });
                });
            });
        });
    });
};

//                angle = start + length * property;
//                CGFloat x = CGRectGetMaxX(rect) + (radius * cosf(degreesToRadians(angle)));
//                CGFloat y = CGRectGetMaxY(rect) + (radius * sinf(degreesToRadians(angle)));
//                CGPoint new_center = CGPointMake(rescale(x, CGRectGetMaxX(rect) - radius, CGRectGetMaxX(rect), (CGRectGetMaxX(rect) - radius) + (button.intrinsicContentSize.width / 2.0), CGRectGetMaxX(rect) - button.intrinsicContentSize.height),
//                                                 rescale(y, CGRectGetMaxY(rect) - radius, CGRectGetMaxY(rect), (CGRectGetMaxY(rect) - radius) + (button.intrinsicContentSize.width / 2.0), CGRectGetMaxY(rect) - button.intrinsicContentSize.height));

//                                CGPoint center_point = CGPointMake(CGRectGetMaxX(bounds), CGRectGetMaxY(bounds));
//                                CGPoint tp = CGPointMake(fmaxf(CGRectGetMinX(bounds), fminf(CGRectGetMaxX(bounds), touch_point.x)),
//                                                         fmaxf(CGRectGetMinY(bounds), fminf(CGRectGetMaxY(bounds), touch_point.y)));
//                                radius = sqrt(pow(tp.x - center_point.x, 2.0) + pow(tp.y - center_point.y, 2.0));


//typedef NS_OPTIONS(NSUInteger, ArcDegreesMeasurementOption) {
//    ArcDegreesMeasurementOptionStart= 1 << 0,
//    ArcDegreesMeasurementOptionEnd = 1 << 1,
//    ArcDegreesMeasurementOptionRadius = 1 << 2
//};
//
//
//typedef double * (^arc_degree_measurement_blk)(ArcDegreesMeasurementOption measurement_options, ...);
//arc_degree_measurement_blk measurement_blk = ^ double * (ArcDegreesMeasurementOption measurement_options, ...) {
//    va_list ap;
//    va_list * ap_ptr = &ap;
//    va_start(ap, measurement_options); // To-Do: get a number of options
//
//    //       for ( i = 0; i < 10; i++ ) {
//    //          printf( "*(p + %f) : %fd\n", i, *(p + i));
//    //       }
//
//    __block double measurement;
//    __block double * measurements = &measurement;
//    for (int i = 0; i < measurement_options; i++) {
//        measurement = (^ double {
//            ArcDegreesMeasurementOption option = 1 << i;
//            switch (option) {
//                case ArcDegreesMeasurementOptionStart:
//                    start = va_arg (*ap_ptr, double);
//                    printf("start[%d] == %f\n", i, start);
//                    return *start_ref;
//                    break;
//                case ArcDegreesMeasurementOptionEnd:
//                    end = va_arg (*ap_ptr, double);
//                    printf("end[%d] == %f\n", i, end);
//                    return *end_ref;
//                    break;
//                case ArcDegreesMeasurementOptionRadius:
//                    radius = va_arg (*ap_ptr, double);
//                    printf("radius[%d] == %f\n", i, radius);
//                    return *radius_ref;
//                    break;
//                default:
//                    return *start_ref;
//                    break;
//            }
//            //            measurements = &measurement;
//        }());
//    }
//    va_end (ap);
//
//    //
//    //    for (int i = 3; i < 3; i++) {
//    //        printf("measurements[%d] == %f\n", i, (double)measurements_ptr[i]);
//    //    }
//
//    return measurements;
//};

static NSUInteger (^gcd)(NSUInteger, NSUInteger) = ^ NSUInteger (NSUInteger firstValue, NSUInteger secondValue) {
    if (firstValue == 0 && secondValue == 0)
        return 1;
    
    NSUInteger r;
    while(secondValue)
    {
        r = firstValue % secondValue;
        firstValue = secondValue;
        secondValue = r;
    }
    return firstValue;
};

-(void)awakeFromNib {
    [super awakeFromNib];
    
    handle_touch_control_event_init = draw_control_init(^ (ControlView * view, CAShapeLayer * layer) {
        return ^ {
            printf("%s\n", __PRETTY_FUNCTION__);
                dispatch_async(dispatch_get_main_queue(), ^{
                    [view setNeedsDisplay];
                    [layer setNeedsDisplay];
                });
//                    CAReplicatorLayer * replicator_layer = [CAReplicatorLayer new];
//                    [replicator_layer setBounds:CGRectMake(CGRectGetMidX(shape_layer.bounds), CGRectGetMidY(shape_layer.bounds), 2.0, 10.0)];
//                    [replicator_layer setFrame:CGRectMake(CGRectGetMidX(shape_layer.bounds), CGRectGetMidY(shape_layer.bounds), 2.0, 10.0)];
//                    [replicator_layer setContentsScale:UIScreen.mainScreen.scale];
//                    [replicator_layer setRasterizationScale:UIScreen.mainScreen.scale];
//                    [replicator_layer setShouldRasterize:FALSE];
//                    [shape_layer addSublayer:replicator_layer];
//
//                    replicator_layer.instanceCount = 100.0;
//
//                    CGFloat degree = 90.0;
//
//                    CATransform3D transform = CATransform3DIdentity;
//                    transform = CATransform3DTranslate(transform, 0, 50, 0);
//                    transform = CATransform3DRotate(transform, degreesToRadians(degree) * M_PI / 180.0, 0.0, 0.0, 1);
//                    transform = CATransform3DTranslate(transform, 0, -50, 0);
//                    replicator_layer.instanceTransform = transform;
//
//                    //apply a color shift for each instance
//                    replicator_layer.instanceBlueOffset  = -1.0/100.0;
//                    replicator_layer.instanceGreenOffset = -1.0/100.0;
//                    replicator_layer.instanceGreenOffset = -1.0/100.0;
//
//                    CALayer * replicated_layer = [CALayer new];
//                    [replicated_layer setContentsScale:UIScreen.mainScreen.scale];
//                    [replicated_layer setRasterizationScale:UIScreen.mainScreen.scale];
//                    [replicated_layer setShouldRasterize:FALSE];
//                    [replicated_layer setBackgroundColor:[UIColor systemYellowColor].CGColor];
//                    [replicated_layer setBounds:CGRectMake(CGRectGetMidX(shape_layer.bounds), CGRectGetMidY(shape_layer.bounds), 2.0, 10.0)];
//                    [replicated_layer setPosition:CGPointMake(CGRectGetMidX(shape_layer.bounds), CGRectGetMidY(shape_layer.bounds))];
//                    [replicator_layer addSublayer:replicated_layer];
        };
    }(self, (CAShapeLayer *)self.layer))((ArcControlMeasurements * const)&arcControlMeasurements)(self)(self.bounds)((CAShapeLayer *)self.layer)(nil));
}

//- (instancetype)initWithFrame:(CGRect)frame {
//    if (self == [super initWithFrame:frame]) {
//        [self setFrame:frame];
//        [self setBounds:frame];
//        [self setUserInteractionEnabled:TRUE];
//        [self setTranslatesAutoresizingMaskIntoConstraints:FALSE];
//        [self setBackgroundColor:[UIColor clearColor]];
//        [self setClipsToBounds:FALSE];
//        //        [self setContentMode:UIViewContentModeCenter];
//
//        [self.layer setFrame:frame];
//        [self.layer setBounds:frame];
//        [self.layer setBorderColor:[UIColor redColor].CGColor];
//        [self.layer setBorderWidth:0.5];
//        [self.layer setContentsScale:UIScreen.mainScreen.scale];
//        [self.layer setRasterizationScale:UIScreen.mainScreen.scale];
//        [self.layer setShouldRasterize:FALSE];
//    }
//
//    return self;
//}

- (void)drawLayer:(CAShapeLayer *)layer inContext:(CGContextRef)ctx {
//    printf("%s\n", __PRETTY_FUNCTION__);
//    draw_secondary_component      = draw_secondary_component_init(layer);
//    handle_touch_control_event_init = draw_secondary_component(ctx);
//    handle_touch_control_event      = handle_touch_control_event_init();
}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
//    printf("%s\n", __PRETTY_FUNCTION__);
    handle_touch_control_event[0](touches.anyObject);
}

- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    handle_touch_control_event[0](touches.anyObject);
}

- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    handle_touch_control_event[0](touches.anyObject);
}

@end

